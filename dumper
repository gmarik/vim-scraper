#!/bin/env ruby

require 'rubygems'
require 'open-uri'
require 'json'
require 'gitrb'
require 'zip/zipfilesystem' # rubyzip gem


$repos_dir = 'repos'
$scripts_dir = 'scripts'
$vimscripts_email = 'vimscripts@rinspin.com'

Dir.mkdir $repos_dir unless test ?d, $repos_dir
Dir.mkdir $scripts_dir unless test ?d, $scripts_dir


def download(url, dest)
    puts "Downloading #{url} to #{dest}"
    open(url, 'rb') { |u|
        File.open(dest, 'wb') { |f|
            f.write(u.read)
        }
    }
end


def copy_file(filename, contents)
    $repo.root[filename] = Gitrb::Blob.new(:data => contents)
end


def smart_copy_file(script, filename, contents)
    if filename =~ /^[^\/]+\.vim/
        # a .vim file in the root directory
        if script['script_type'] == 'utility'
            copy_file("plugin/" + filename, contents)
        elsif script['script_type'] == 'syntax'
            copy_file("syntax/" + filename, contents)
        else
            raise "Don't know where to put #{filename} for #{script['script_type']}"
        end
    else
        copy_file(filename, contents)
    end
end


def copy_zipfile(zip_path)
    Zip::ZipFile.open(zip_path) do |zipfile|
        zipfile.each do |file|
            raise "add symlinks!" if file.symlink?
            copy_file(file.name, file.get_input_stream.read)
        end
    end
end


def add_version(version, script)
    scriptname = "#{version['date']} #{version['script_version']} #{version['filename']}"
    scriptdir = File.join($scripts_dir, script['name'])
    Dir.mkdir scriptdir unless test ?d, scriptdir
    scriptfile = File.join(scriptdir, scriptname)
    download(version['url'], scriptfile) unless test ?f, scriptfile

    case scriptfile
    when /\.vim$/ then smart_copy_file(script, version['filename'], File.read(scriptfile))
    when /\.zip$/ then copy_zipfile(scriptfile)
    when /\.tar\.gz$|\.tgz$/ then puts "can't handle .tar.gz"
    when /\.tar\.bz2?$|\.tbz2?$/ then puts "can't handle .tar.bz"
    when /\.gz$/ then puts "can't handle .gz"
    when /\.bz2?$/ then puts "can't handle .bz"
    when /\.vba$/ then puts "can't handle .vba"
    end
end


def find_version(version)
    tagref = "#{$repo.path}/refs/tags/#{version['script_version']}"
    return nil unless test ?f, tagref
    id = File.read(tagref)
    tag = $repo.get(id)
    raise "not a commit tag" unless tag.tagtype == 'commit'
    return tag
end


def read_script(script)
    $repo_path = File.join($repos_dir, script['name'] + '.git')
    # if gitrb is dying on the following line, you need this fix:
    #   http://github.com/bronson/gitrb/commit/ae931ad7fe8309bcd2c4b9cc582c1500fa152e8d
    $repo = Gitrb::Repository.new(:path => $repo_path, :bare => true, :create => true)

    # token = File.read('token').chomp
    # github = Octopussy::Client.new(:login => 'vim-scripts', :token => token)

    committer = Gitrb::User.new("vim-scripts", $vimscripts_email)
    puts "Processing script #{script['script_id']}: #{script['name']}"
    script['versions'].reverse.each do |version|
        author = Gitrb::User.new("#{version['author']['first_name']} #{version['author']['last_name']}",
                                version['author']['email'], Time.new(*version['date'].split('-'), 0, 0, 0, 0))
        if find_version(version)
            puts "  skipped #{version['filename']} #{version['date']} #{version['script_version']}"
        else
            $repo.transaction(version['release_notes'], author, committer) {
                add_version(version, script)
                copy_file('README', script['description']+"\n") unless $repo.root['README']
            }
            # don't need to chdir before git tag since Gitrb set GIT_DIR.  :-/
            $repo.git_tag('-a', version['script_version'], '-m', "tag #{version['script_version']}")
            puts "  added #{version['filename']} #{version['date']} #{version['script_version']}"
        end
    end
end


read_script(JSON.parse($stdin.read))
