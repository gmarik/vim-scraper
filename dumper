#!/bin/env ruby

require 'rubygems'
require 'open-uri'
require 'json'
require 'gitrb'
require 'zip/zipfilesystem' # rubyzip gem


$repos_dir = 'repos'
$scripts_dir = 'scripts'


def download(url, dest)
    puts "Downloading #{url} to #{dest}"
    open(url, 'rb') { |u|
        File.open(dest, 'wb') { |f|
            f.write(u.read)
        }
    }
end


def copy_file(filename, contents)
    $repo.root[filename] = Gitrb::Blob.new(:data => contents)
end


def copy_zipfile(zip_path)
    Zip::ZipFile.open(zip_path) do |zipfile|
        zipfile.each do |file|
            raise "add symlinks!" if file.symlink?
            copy_file(file.name, file.get_input_stream.read)
        end
    end
end


def add_version(version, script)
    scriptname = "#{version['date']} #{version['script_version']} #{version['filename']}"
    scriptdir = File.join($scripts_dir, script['name'])
    Dir.mkdir $scripts_dir unless test ?d, $scripts_dir
    Dir.mkdir scriptdir unless test ?d, scriptdir
    scriptfile = File.join(scriptdir, scriptname)
    download(version['url'], scriptfile) unless test ?f, scriptfile

    case scriptfile
    when /\.vim$/ then copy_file(scriptfile, File.read(scriptfile))
    when /\.zip$/ then copy_zipfile(scriptfile)
    when /\.tar\.gz$|\.tgz$/ then puts "can't handle .tar.gz"
    when /\.tar\.bz2?$|\.tbz2?$/ then puts "can't handle .tar.bz"
    when /\.gz$/ then puts "can't handle .gz"
    when /\.bz2?$/ then puts "can't handle .bz"
    when /\.vba$/ then puts "can't handle .vba"
    end
end


def version_exists(version)
    # TODO: see if this version is already in the repo
    return false
end


def read_script(script)
    Dir.mkdir $repos_dir unless test ?d, $repos_dir
    $repo_path = File.join($repos_dir, script['name'] + '.git')
    $repo = Gitrb::Repository.new(:path => $repo_path, :bare => true, :create => true)

    # token = File.read('token').chomp
    # github = Octopussy::Client.new(:login => 'vim-scripts', :token => token)

    script['versions'].reverse.each do |version|
        unless version_exists(version)
            $repo.transaction(version['release_notes']) {
                add_version(version, script)
            }
        end
        exit
    end
end


read_script(JSON.parse($stdin.read))
